[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "graph-hypernetwork-forge"
version = "0.1.0"
description = "A hypernetwork that generates GNN weights on-the-fly from textual metadata"
readme = "README.md"
license = {text = "MIT"}
authors = [{name = "Daniel Schmidt"}]
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "torch>=2.3.0",
    "torch-geometric>=2.5.0",
    "transformers>=4.40.0",
    "sentence-transformers>=3.0.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "networkx>=3.0",
    "pandas>=2.0.0",
    "tqdm>=4.65.0",
    "wandb>=0.16.0",
    "hydra-core>=1.3.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "bandit[toml]>=1.7.0",
    "safety>=2.3.0",
    "memory-profiler>=0.60.0",
]
security = [
    "bandit[toml]>=1.7.0",
    "safety>=2.3.0",
    "semgrep>=1.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]
performance = [
    "pytest-benchmark>=4.0.0",
    "memory-profiler>=0.60.0",
    "line-profiler>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/graph-hypernetwork-forge"
Repository = "https://github.com/yourusername/graph-hypernetwork-forge"
Issues = "https://github.com/yourusername/graph-hypernetwork-forge/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["graph_hypernetwork_forge*"]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
check_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "--cov=graph_hypernetwork_forge --cov-report=html --cov-report=term-missing --cov-fail-under=80 -p no:benchmark"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security tests",
    "performance: marks tests as performance tests",
]

[tool.coverage.run]
source = ["graph_hypernetwork_forge"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101"]  # Skip assert_used test

[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "E501", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".venv",
    "venv",
]

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"{tests,docs}/*" = ["E402"]